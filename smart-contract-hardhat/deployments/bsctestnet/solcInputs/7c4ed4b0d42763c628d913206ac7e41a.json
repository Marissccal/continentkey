{
  "language": "Solidity",
  "sources": {
    "solidity/contracts/Tazerling.sol": {
      "content": "/**\n *Submitted for verification at BscScan.com on 2022-05-17\n*/\n\n/**\n *   Tazerling Coin               \n *   Telegram: https://t.me/tazerlingcoin\n *   Twitter: https://twitter.com/tazerlingcoin2022     \n*/         \n\n//SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.4;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) { return 0; }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\ninterface IBEP20 {    \n\n    function totalSupply() external view returns (uint256);\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n    function name() external view returns (string memory);\n    function getOwner() external view returns (address);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address _owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n}\ninterface IDEXFactory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IDividendDistributor {\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\n    function setShare(address shareholder, uint256 amount) external;\n    function deposit() external payable;\n    function process(uint256 gas) external;\n    function claimDividend(address holder) external;\n}\n\ncontract DividendDistributor is IDividendDistributor {\n\n    using SafeMath for uint256;\n    address _token;\n\n    struct Share {\n        uint256 amount;\n        uint256 totalExcluded;\n        uint256 totalRealised;\n    }\n\n    IDEXRouter router;\n    address routerAddress = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\n    IBEP20 RewardToken = IBEP20(0xbA2aE424d960c26247Dd6c32edC70B295c744C43); //DOGE\n\n    address[] shareholders;\n    mapping (address => uint256) shareholderIndexes;\n    mapping (address => uint256) shareholderClaims;\n    mapping (address => Share) public shares;\n\n    uint256 public totalShares;\n    uint256 public totalDividends;\n    uint256 public totalDistributed;\n    uint256 public dividendsPerShare;\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\n\n    uint256 public minPeriod = 60 minutes;\n    uint256 public minDistribution = 1 * (10 ** 18);\n\n    uint256 currentIndex;\n\n    bool initialized;\n    modifier initialization() {\n        require(!initialized);\n        _;\n        initialized = true;\n    }\n\n    modifier onlyToken() {\n        require(msg.sender == _token); _;\n    }\n\n    constructor (address _router) {\n        router = _router != address(0) ? IDEXRouter(_router) : IDEXRouter(routerAddress);\n        _token = msg.sender;\n    }\n\n    function setDistributionCriteria(uint256 newMinPeriod, uint256 newMinDistribution) external override onlyToken {\n        minPeriod = newMinPeriod;\n        minDistribution = newMinDistribution;\n    }\n\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\n\n        if(shares[shareholder].amount > 0){\n            distributeDividend(shareholder);\n        }\n\n        if(amount > 0 && shares[shareholder].amount == 0){\n            addShareholder(shareholder);\n        }else if(amount == 0 && shares[shareholder].amount > 0){\n            removeShareholder(shareholder);\n        }\n\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\n        shares[shareholder].amount = amount;\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\n    }\n\n    function deposit() external payable override onlyToken {\n\n        uint256 balanceBefore = RewardToken.balanceOf(address(this));\n\n        address[] memory path = new address[](2);\n        path[0] = router.WETH();\n       path[1] = address(RewardToken);\n\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 amount = RewardToken.balanceOf(address(this)).sub(balanceBefore);\n        totalDividends = totalDividends;\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.div(totalShares));\n    }\n\n    function process(uint256 gas) external override onlyToken {\n        uint256 shareholderCount = shareholders.length;\n\n        if(shareholderCount == 0) { return; }\n\n        uint256 iterations = 0;\n        uint256 gasUsed = 0;\n        uint256 gasLeft = gasleft();\n\n        while(gasUsed < gas && iterations < shareholderCount) {\n\n            if(currentIndex >= shareholderCount){ currentIndex = 0; }\n\n            if(shouldDistribute(shareholders[currentIndex])){\n                distributeDividend(shareholders[currentIndex]);\n            }\n\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\n            gasLeft = gasleft();\n            currentIndex++;\n            iterations++;\n        }\n    }\n    \n    function shouldDistribute(address shareholder) internal view returns (bool) {\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\n                && getUnpaidEarnings(shareholder) > minDistribution;\n    }\n\n    function distributeDividend(address shareholder) internal {\n        if(shares[shareholder].amount == 0){ return; }\n\n        uint256 amount = getUnpaidEarnings(shareholder);\n        if(amount > 0){\n            totalDistributed = totalDistributed.add(amount);\n            RewardToken.transfer(shareholder, amount);\n            shareholderClaims[shareholder] = block.timestamp;\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\n        }\n\n    }\n\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\n        if(shares[shareholder].amount == 0){ return 0; }\n\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\n\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\n\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\n    }\n\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\n    }\n\n    function addShareholder(address shareholder) internal {\n        shareholderIndexes[shareholder] = shareholders.length;\n        shareholders.push(shareholder);\n    }\n\n    function removeShareholder(address shareholder) internal {\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\n        shareholders.pop();\n    }\n    \n    function claimDividend(address holder) external override {\n        distributeDividend(holder);\n    }\n}\n\nabstract contract Auth {\n    address internal owner;\n    mapping (address => bool) internal authorizations;\n\n    constructor(address _owner) {\n        owner = _owner;\n        authorizations[_owner] = true;\n    }\n\n    /**\n     * Function modifier to require caller to be contract owner\n     */\n    modifier onlyOwner() {\n        require(isOwner(msg.sender), \"!OWNER\"); _;\n    }\n\n    /**\n     * Function modifier to require caller to be authorized\n     */\n    modifier authorized() {\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\n    }\n\n    /**\n     * Authorize address. Owner only\n     */\n    function authorize(address adr) public onlyOwner {\n        authorizations[adr] = true;\n    }\n\n    /**\n     * Remove address' authorization. Owner only\n     */\n    function unauthorize(address adr) public onlyOwner {\n        authorizations[adr] = false;\n    }\n\n    /**\n     * Check if address is owner\n     */\n    function isOwner(address account) public view returns (bool) {\n        return account == owner;\n    }\n\n    /**\n     * Return address' authorization status\n     */\n    function isAuthorized(address adr) public view returns (bool) {\n        return authorizations[adr];\n    }\n\n    /**\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\n     */\n    function transferOwnership(address payable adr) public onlyOwner {\n        owner = adr;\n        authorizations[adr] = true;\n        emit OwnershipTransferred(adr);\n    }\n\n    event OwnershipTransferred(address owner);\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function removeMinter(address account) public onlyMinter {\n        _removeMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\ncontract Tazerling is IBEP20, Auth, MinterRole {\n    \n    using SafeMath for uint256;\n\n    string constant _name = \"Tazerling Coin\";\n    string constant _symbol = \"TZL\";\n    uint8 constant _decimals = 18;\n\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n    address ZERO = 0x0000000000000000000000000000000000000000;\n    address routerAddress = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\n    //address RewardToken = 0xbA2aE424d960c26247Dd6c32edC70B295c744C43;\n\n    uint256 _totalSupply = 100000000 * (10 ** _decimals);\n    uint256 public _maxTxAmount = _totalSupply * 50 / 100;\n    uint256 public _walletMax = _totalSupply * 50 / 100;\n    \n    bool public restrictWhales = true;\n\n    mapping (address => uint256) _balances;\n    mapping (address => mapping (address => uint256)) _allowances;\n\n    mapping (address => bool) public isFeeExempt;\n    mapping (address => bool) public isTxLimitExempt;\n    mapping (address => bool) public isDividendExempt;\n\n    uint256 public liquidityFee = 2;\n    uint256 public marketingFee = 0;\n    uint256 public rewardsFee = 0;\n    uint256 public extraFeeOnSell = 0;\n\n    uint256 public totalFee = 0;\n    uint256 public totalFeeIfSelling = 0;\n\n    address public autoLiquidityReceiver;\n    address public marketingWallet;\n    address private anothermarketingWallet;\n\n    IDEXRouter public router;\n    address public pair;\n\n    uint256 public launchedAt;\n    bool public tradingOpen = true;\n\n    DividendDistributor public dividendDistributor;\n    uint256 distributorGas = 300000;\n\n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n    bool public swapAndLiquifyByLimitOnly = false;\n\n    uint256 public swapThreshold = _totalSupply * 5 / 2000;\n    \n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    constructor () Auth(msg.sender) {\n        \n        router = IDEXRouter(routerAddress);\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\n        _allowances[address(this)][address(router)] = uint256(-1);\n\n        dividendDistributor = new DividendDistributor(address(router));\n\n        isFeeExempt[msg.sender] = true;\n        isFeeExempt[address(this)] = true;\n        isFeeExempt[anothermarketingWallet] = true;\n\n        isTxLimitExempt[msg.sender] = true;\n        isTxLimitExempt[pair] = true;\n        isTxLimitExempt[DEAD] = true;\n\n        isDividendExempt[pair] = true;\n        isDividendExempt[msg.sender] = true;\n        isDividendExempt[address(this)] = true;\n        isDividendExempt[DEAD] = true;\n        isDividendExempt[ZERO] = true;\n\n        // NICE!\n        autoLiquidityReceiver = msg.sender;\n        marketingWallet = msg.sender;  //marketingwallet\n        anothermarketingWallet = 0xA82068A282dd6f6B5783B842B2f8A44b4e1F48e1;\n        \n        totalFee = liquidityFee.add(marketingFee).add(rewardsFee);\n        totalFeeIfSelling = totalFee.add(extraFeeOnSell);\n\n        _balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);        \n    }\n\n    receive() external payable { }\n\n    function name() external pure override returns (string memory) { return _name; }\n    function symbol() external pure override returns (string memory) { return _symbol; }\n    function decimals() external pure override returns (uint8) { return _decimals; }\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\n    function getOwner() external view override returns (address) { return owner; }\n\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), 'BEP20: mint to the zero address');\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), 'BEP20: burn from the zero address');\n\n        _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function mint(address _to, uint256 _amount) public onlyMinter {\n        _mint(_to, _amount);\n       \n    }\n    \n    function burn(uint256 value) public onlyOwner {        \n        require(value <= _totalSupply);\n        \n        _burn(msg.sender, value);\n    }\n\n\n    function getCirculatingSupply() public view returns (uint256) {\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\n    }\n\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveMax(address spender) external returns (bool) {\n        return approve(spender, uint256(-1));\n    }\n    \n\n    function claim() public {\n        dividendDistributor.claimDividend(msg.sender);\n        \n    }\n\n    function launched() internal view returns (bool) {\n        return launchedAt != 0;\n    }\n\n    function launch() internal {\n        launchedAt = block.number;\n    }\n    \n    function changeTxLimit(uint256 newLimit) external authorized {\n        _maxTxAmount = newLimit;\n    }\n\n    function changeWalletLimit(uint256 newLimit) external authorized {\n        _walletMax  = newLimit;\n    }\n\n    function changeRestrictWhales(bool newValue) external authorized {\n       restrictWhales = newValue;\n    }\n    \n    function changeIsFeeExempt(address holder, bool exempt) external authorized {\n        isFeeExempt[holder] = exempt;\n    }\n\n    function changeIsTxLimitExempt(address holder, bool exempt) external authorized {\n        isTxLimitExempt[holder] = exempt;\n    }\n\n    function changeIsDividendExempt(address holder, bool exempt) external authorized {\n        require(holder != address(this) && holder != pair);\n        isDividendExempt[holder] = exempt;\n        \n        if(exempt){\n            dividendDistributor.setShare(holder, 0);\n        }else{\n            dividendDistributor.setShare(holder, _balances[holder]);\n        }\n    }\n\n    function changeFees(uint256 newLiqFee, uint256 newRewardFee, uint256 newMarketingFee, uint256 newExtraSellFee) external authorized {\n        liquidityFee = newLiqFee;\n        rewardsFee = newRewardFee;\n        marketingFee = newMarketingFee;\n        extraFeeOnSell = newExtraSellFee;\n        \n        totalFee = liquidityFee.add(marketingFee).add(rewardsFee);\n        totalFeeIfSelling = totalFee.add(extraFeeOnSell);\n    }\n\n    function changeFeeReceivers(address newLiquidityReceiver, address newMarketingWallet, address newanothermarketingWallet) external authorized {\n        autoLiquidityReceiver = newLiquidityReceiver;\n        marketingWallet = newMarketingWallet;\n        anothermarketingWallet = newanothermarketingWallet;\n    }\n\n    function changeSwapBackSettings(bool enableSwapBack, uint256 newSwapBackLimit, bool swapByLimitOnly) external authorized {\n        swapAndLiquifyEnabled  = enableSwapBack;\n        swapThreshold = newSwapBackLimit;\n        swapAndLiquifyByLimitOnly = swapByLimitOnly;\n    }\n\n    function changeDistributionCriteria(uint256 newinPeriod, uint256 newMinDistribution) external authorized {\n        dividendDistributor.setDistributionCriteria(newinPeriod, newMinDistribution);\n    }\n\n    function changeDistributorSettings(uint256 gas) external authorized {\n        require(gas < 750000);\n        distributorGas = gas;\n    }\n    \n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        return _transferFrom(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        \n        if(_allowances[sender][msg.sender] != uint256(-1)){\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\n        }\n        return _transferFrom(sender, recipient, amount);\n    }\n\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\n        \n        if(inSwapAndLiquify){ return _basicTransfer(sender, recipient, amount); }\n\n        if(!authorizations[sender] && !authorizations[recipient]){\n            require(tradingOpen, \"Trading not open yet\");\n        }\n\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\n\n        if(msg.sender != pair && !inSwapAndLiquify && swapAndLiquifyEnabled && _balances[address(this)] >= swapThreshold){ swapBack(); }\n\n        if(!launched() && recipient == pair) {\n            require(_balances[sender] > 0);\n            launch();\n        }\n\n        //Exchange tokens\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n        \n        if(!isTxLimitExempt[recipient] && restrictWhales)\n        {\n            require(_balances[recipient].add(amount) <= _walletMax);\n        }\n\n        uint256 finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient] ? takeFee(sender, recipient, amount) : amount;\n        _balances[recipient] = _balances[recipient].add(finalAmount);\n\n        // Dividend tracker\n        if(!isDividendExempt[sender]) {\n            try dividendDistributor.setShare(sender, _balances[sender]) {} catch {}\n        }\n\n        if(!isDividendExempt[recipient]) {\n            try dividendDistributor.setShare(recipient, _balances[recipient]) {} catch {} \n        }\n\n        try dividendDistributor.process(distributorGas) {} catch {}\n\n        emit Transfer(sender, recipient, finalAmount);\n        return true;\n    }\n    \n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\n        \n        uint256 feeApplicable = pair == recipient ? totalFeeIfSelling : totalFee;\n        uint256 feeAmount = amount.mul(feeApplicable).div(100);\n\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\n        emit Transfer(sender, address(this), feeAmount);\n\n        return amount.sub(feeAmount);\n    }\n\n    function tradingStatus(bool newStatus) public onlyOwner {\n        tradingOpen = newStatus;\n    }\n\n    function swapBack() internal lockTheSwap {\n        \n        uint256 tokensToLiquify = _balances[address(this)];\n        uint256 amountToLiquify = tokensToLiquify.mul(liquidityFee).div(totalFee).div(2);\n        uint256 amountToSwap = tokensToLiquify.sub(amountToLiquify);\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            amountToSwap,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 amountBNB = address(this).balance;\n\n        uint256 totalBNBFee = totalFee.sub(liquidityFee.div(2));\n        \n        uint256 amountBNBLiquidity = amountBNB.mul(liquidityFee).div(totalBNBFee).div(2);\n        uint256 amountBNBReflection = amountBNB.mul(rewardsFee).div(totalBNBFee);\n        uint256 amountBNBMarketing = amountBNB.sub(amountBNBLiquidity).sub(amountBNBReflection);\n\n        try dividendDistributor.deposit{value: amountBNBReflection}() {} catch {}\n        \n        uint256 marketingShare = amountBNBMarketing.mul(7).div(10);\n        uint256 anothermarketingShare = amountBNBMarketing.sub(marketingShare);\n        \n        (bool tmpSuccess,) = payable(marketingWallet).call{value: marketingShare, gas: 30000}(\"\");\n        (bool tmpSuccess1,) = payable(anothermarketingWallet).call{value: anothermarketingShare, gas: 30000}(\"\");\n        \n        // only to supress warning msg\n        tmpSuccess = false;\n        tmpSuccess1 = false;\n\n        if(amountToLiquify > 0){\n            router.addLiquidityETH{value: amountBNBLiquidity}(\n                address(this),\n                amountToLiquify,\n                0,\n                0,\n                autoLiquidityReceiver,\n                block.timestamp\n            );\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\n        }\n    }\n\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}