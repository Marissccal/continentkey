{
  "address": "0x3ab6fc86b48648f2F322Af4ff6f9F00B56864597",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CKNFT_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKEN_ID_PLUS_ONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WL_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WL_TIMER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWhiteListActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minted",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "ownerMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "ownerMintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setMaxWLMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_wlEnd",
          "type": "bool"
        }
      ],
      "name": "setWhitelistActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToExistingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToMaxSupplyPlusOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "whiteListedMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        }
      ],
      "name": "whitelistUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x21c3fe344e9adc33975dc131da3329618142fb1ebb91a1672e38581f0b347035",
  "receipt": {
    "to": null,
    "from": "0x583d2A624acFC4a01ad93cdDE2a759ad344992A6",
    "contractAddress": "0x3ab6fc86b48648f2F322Af4ff6f9F00B56864597",
    "transactionIndex": 6,
    "gasUsed": "3093028",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000200000000000000000000001000000000400000000000000000000000000020000000000000000000800000000010800000000000000000000400000000000000000000008000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00080000000000000000000020000000000000000000000000000000000000000000000000000000000002000000",
    "blockHash": "0x65759e1009fc9306675638ec0879201ee837ba94a7fdf8d4a1476525e3e5c083",
    "transactionHash": "0x21c3fe344e9adc33975dc131da3329618142fb1ebb91a1672e38581f0b347035",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 11341339,
        "transactionHash": "0x21c3fe344e9adc33975dc131da3329618142fb1ebb91a1672e38581f0b347035",
        "address": "0x3ab6fc86b48648f2F322Af4ff6f9F00B56864597",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000583d2a624acfc4a01ad93cdde2a759ad344992a6"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x65759e1009fc9306675638ec0879201ee837ba94a7fdf8d4a1476525e3e5c083"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 11341339,
        "transactionHash": "0x21c3fe344e9adc33975dc131da3329618142fb1ebb91a1672e38581f0b347035",
        "address": "0x3ab6fc86b48648f2F322Af4ff6f9F00B56864597",
        "topics": [
          "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"
        ],
        "data": "0x000000000000000000000000583d2a624acfc4a01ad93cdde2a759ad344992a6",
        "logIndex": 11,
        "blockHash": "0x65759e1009fc9306675638ec0879201ee837ba94a7fdf8d4a1476525e3e5c083"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 11341339,
        "transactionHash": "0x21c3fe344e9adc33975dc131da3329618142fb1ebb91a1672e38581f0b347035",
        "address": "0x3ab6fc86b48648f2F322Af4ff6f9F00B56864597",
        "topics": [
          "0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb",
          "0x000000000000000000000000583d2a624acfc4a01ad93cdde2a759ad344992a6",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000583d2a624acfc4a01ad93cdde2a759ad344992a6"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 12,
        "blockHash": "0x65759e1009fc9306675638ec0879201ee837ba94a7fdf8d4a1476525e3e5c083"
      }
    ],
    "blockNumber": 11341339,
    "cumulativeGasUsed": "6770988",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 24,
  "solcInputHash": "48407762ab6523a103bf004ff3075cec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CKNFT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKEN_ID_PLUS_ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WL_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WL_TIMER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhiteListActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"ownerMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxWLMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_wlEnd\",\"type\":\"bool\"}],\"name\":\"setWhitelistActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToExistingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToMaxSupplyPlusOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"whiteListedMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"contractURI()\":{\"details\":\"function for OpenSea that returns uri of the contract metadata\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"function for OpenSea that returns the total quantity of a token ID currently in existence\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/contracts/CKNFT.sol\":\"CKNFT\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"solidity/contracts/CKNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n\\ncontract CKNFT is ERC1155, Ownable, Pausable {\\n    \\n    string public name = \\\"CONTINENT KEY\\\";\\n    string public symbol = \\\"CKNFT\\\";\\n    string public contractUri;\\n\\n    uint256 public constant CKNFT_PRICE = 0.0001 ether;\\n    uint256 public constant MAX_TOKEN_ID_PLUS_ONE = 2; // 2 tokens numbered 0 and 1 inclusive\\n    uint256 public WL_TIMER;\\n    uint256 public MAX_MINT = 20;\\n    uint256 public MAX_WL_MINT = 20;\\n    \\n\\n    uint16 public minted;\\n\\n    mapping(uint256 => uint256) public tokenIdToExistingSupply;\\n    mapping(uint256 => uint256) public tokenIdToMaxSupplyPlusOne; // set in the constructor\\n    mapping(address => bool) public whitelistedAddresses;\\n    mapping(address => uint256) public whitelistedPermit;\\n\\n    bool private _reentrant = false;\\n    bool public isWhiteListActive = false;\\n\\n    modifier nonReentrant() {\\n        require(!_reentrant, \\\"No reentrancy\\\");\\n        _reentrant = true;\\n        _;\\n        _reentrant = false;\\n    }\\n\\n    constructor()\\n        ERC1155(\\n            \\\"https://gateway.pinata.cloud/ipfs/Qmca5vF9LzXSTofSWy2aCqaT4Teet8iW2GpYJTMirxmPPa/{id}.json\\\"\\n        )\\n    {\\n        contractUri = \\\"https://gateway.pinata.cloud/ipfs/QmRi4M8wDxvwiMW7RVcb71xyaTdefZuK3VDjuTiAUwYFaN\\\"; // json contract metadata file for OpenSea\\n\\n        tokenIdToMaxSupplyPlusOne[0] = 10000;\\n        tokenIdToMaxSupplyPlusOne[1] = 10000;\\n        \\n        Pausable._pause();\\n        uint256[] memory _ids = new uint256[](2);\\n        uint256[] memory _amounts = new uint256[](2);\\n        for (uint256 i = 0; i < MAX_TOKEN_ID_PLUS_ONE; ++i) {\\n            _ids[i] = i;\\n            _amounts[i] = 1;\\n            tokenIdToExistingSupply[i] = 1;\\n        }\\n        _mintBatch(msg.sender, _ids, _amounts, \\\"\\\");\\n    }\\n\\n    function setContractURI(string calldata _newURI) external onlyOwner {\\n        contractUri = _newURI; // updatable in order to change general project info for marketplaces like OpenSea\\n    }\\n\\n    /// @dev function for OpenSea that returns uri of the contract metadata\\n    function contractURI() external view returns (string memory) {\\n        return contractUri; // OpenSea\\n    }\\n\\n    /// @dev function for OpenSea that returns the total quantity of a token ID currently in existence\\n    function totalSupply(uint256 _id) external view returns (uint256) {\\n        require(_id < MAX_TOKEN_ID_PLUS_ONE, \\\"id must be < 2\\\");\\n        return tokenIdToExistingSupply[_id];\\n    }\\n\\n    function setPaused(bool _paused) external onlyOwner {\\n        if (_paused) _pause();\\n        else _unpause();\\n    }\\n\\n    function setWhitelistActive(bool _wlEnd) external onlyOwner {\\n        WL_TIMER = block.timestamp + 15 minutes;\\n        isWhiteListActive = _wlEnd;\\n    }\\n\\n    function whitelistUsers(address[] calldata _users) public onlyOwner {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            whitelistedAddresses[_users[i]] = true;\\n        }\\n    }\\n\\n    function setMaxWLMint(uint256 _max) public onlyOwner {\\n        MAX_WL_MINT = _max;\\n    }\\n\\n    function whiteListedMint(uint256 _id, uint256 _amount)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        // WL_Timer is here to lock access for WL only under 24h\\n        require(\\n            (isWhiteListActive && WL_TIMER > block.timestamp),\\n            \\\"whitelist is finish\\\"\\n        );\\n        require(\\n            whitelistedAddresses[msg.sender] == true,\\n            \\\"You'r not whitelisted !\\\"\\n        );\\n        \\n        require(\\n            whitelistedPermit[msg.sender] + _amount <= MAX_WL_MINT,\\n            \\\"Only 20 Nfts by whitelisted address. \\\"\\n        );\\n        require(_id < MAX_TOKEN_ID_PLUS_ONE, \\\"id must be < 2\\\");\\n        require(minted + _amount <= 40, \\\"All tokens minted\\\");\\n        require(_amount > 0 && _amount <= MAX_MINT, \\\"Invalid mint amount\\\");                \\n\\n        uint256 existingSupply = tokenIdToExistingSupply[_id];\\n\\n        require(msg.value == _amount * CKNFT_PRICE, \\\"incorrect ETH\\\");\\n        require(msg.sender == tx.origin, \\\"no smart contracts\\\");\\n\\n        unchecked {\\n            existingSupply += _amount;\\n        }\\n        tokenIdToExistingSupply[_id] = existingSupply;      \\n        \\n        for (uint256 i = 0; i < _amount; i++) {\\n            minted++;            \\n            whitelistedPermit[msg.sender]++;   \\n        }\\n        _mint(msg.sender, _id, _amount, \\\"\\\");\\n    }\\n\\n    function mint(uint256 _id, uint256 _amount) external payable whenNotPaused {\\n        require(_id < MAX_TOKEN_ID_PLUS_ONE, \\\"id must be < 2\\\");\\n\\n        uint256 existingSupply = tokenIdToExistingSupply[_id];\\n        require(\\n            existingSupply + _amount < tokenIdToMaxSupplyPlusOne[_id],\\n            \\\"supply exceeded\\\"\\n        );\\n\\n        require(msg.value == _amount * CKNFT_PRICE, \\\"incorrect ETH\\\");\\n        require(msg.sender == tx.origin, \\\"no smart contracts\\\");\\n        unchecked {\\n            existingSupply += _amount;\\n        }\\n        tokenIdToExistingSupply[_id] = existingSupply;\\n        _mint(msg.sender, _id, _amount, \\\"\\\");\\n    }\\n\\n    function ownerMint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        require(_id < MAX_TOKEN_ID_PLUS_ONE, \\\"id must be < 2\\\");\\n\\n        uint256 existingSupply = tokenIdToExistingSupply[_id];\\n        require(\\n            existingSupply + _amount < tokenIdToMaxSupplyPlusOne[_id],\\n            \\\"supply exceeded\\\"\\n        );\\n        unchecked {\\n            existingSupply += _amount;\\n        }\\n        tokenIdToExistingSupply[_id] = existingSupply;\\n        _mint(_to, _id, _amount, \\\"\\\");\\n    }\\n\\n    function mintBatch(uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external\\n        payable whenNotPaused\\n    {\\n        uint256 sumAmounts;\\n        uint256 arrayLength = _ids.length;\\n        for (uint256 i = 0; i < arrayLength; ++i) {\\n            sumAmounts += _amounts[i];\\n        }\\n\\n        require(msg.value == sumAmounts * CKNFT_PRICE, \\\"incorrect ETH\\\");\\n\\n        for (uint256 i = 0; i < arrayLength; ++i) {\\n            uint256 _id = _ids[i];\\n            uint256 _amount = _amounts[i];\\n            uint256 existingSupply = tokenIdToExistingSupply[_id];\\n            \\n            require(\\n                existingSupply + _amount < tokenIdToMaxSupplyPlusOne[_id],\\n                \\\"supply exceeded\\\"\\n            );\\n            require(msg.sender == tx.origin, \\\"no smart contracts\\\");\\n\\n            unchecked {\\n                existingSupply += _amount;\\n            }\\n            tokenIdToExistingSupply[_id] = existingSupply;\\n        }\\n        _mintBatch(msg.sender, _ids, _amounts, \\\"\\\");\\n    }\\n\\n    function ownerMintBatch(\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external onlyOwner {\\n        uint256 arrayLength = _ids.length;\\n\\n        for (uint256 i = 0; i < arrayLength; ++i) {\\n            uint256 existingSupply = tokenIdToExistingSupply[_ids[i]];\\n            uint256 _id = _ids[i];\\n            uint256 _amount = _amounts[i];\\n\\n            require(_id < MAX_TOKEN_ID_PLUS_ONE, \\\"id must be < 2\\\");\\n            require(\\n                existingSupply + _amount < tokenIdToMaxSupplyPlusOne[_id],\\n                \\\"supply exceeded\\\"\\n            );\\n            require(msg.sender == tx.origin, \\\"no smart contracts\\\");\\n\\n            unchecked {\\n                existingSupply += _amount;\\n            }\\n            tokenIdToExistingSupply[_id] = existingSupply;\\n        }\\n        _mintBatch(msg.sender, _ids, _amounts, \\\"\\\");\\n    }\\n\\n    function withdraw() external payable onlyOwner {\\n        (bool succeed, ) = payable(owner()).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(succeed, \\\"failed to withdraw ETH\\\");\\n    }\\n}\",\"keccak256\":\"0x38fcb931c06531f7782d4f177967a3bd96c8f14b69ffe2f8e4de0f4aa0d4f0b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600d60808190526c434f4e54494e454e54204b455960981b60a09081526200003091600491906200072e565b506040805180820190915260058082526410d2d3919560da1b60209092019182526200005d91816200072e565b5060146008819055600955600f805461ffff191690553480156200008057600080fd5b506040518060800160405280605a815260200162003925605a9139620000a68162000243565b50620000b2336200025c565b6003805460ff60a01b19169055604080516080810190915260508082526200397f60208301398051620000ee916006916020909101906200072e565b50600c60209081526127107f13649b2456f1b42fef0f0040b3aaeabcd21a76a0f3f5defd4f583839455116e881905560016000527fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5c5562000158906200186e620002ae821b17901c565b60408051600280825260608201835260009260208301908036833750506040805160028082526060820183529394506000939092509060208301908036833701905050905060005b6002811015620002175780838281518110620001c057620001c0620007d4565b6020026020010181815250506001828281518110620001e357620001e3620007d4565b6020908102919091018101919091526000828152600b90915260409020600190556200020f8162000800565b9050620001a0565b506200023b338383604051806020016040528060008152506200036160201b60201c565b505062000ac5565b8051620002589060029060208401906200072e565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620002c2600354600160a01b900460ff1690565b15620003085760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064015b60405180910390fd5b6003805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620003443390565b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038416620003c35760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401620002ff565b8151835114620004275760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401620002ff565b3360005b8451811015620004cf578381815181106200044a576200044a620007d4565b60200260200101516000808784815181106200046a576200046a620007d4565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254620004b491906200081c565b90915550819050620004c68162000800565b9150506200042b565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516200052292919062000874565b60405180910390a46200053b816000878787876200054a565b5050505050565b505050505050565b62000569846001600160a01b03166200071f60201b620018f01760201c565b15620005425760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190620005a59089908990889088908890600401620008f6565b6020604051808303816000875af1925050508015620005e3575060408051601f3d908101601f19168201909252620005e0918101906200095a565b60015b620006a357620005f26200098d565b806308c379a00362000632575062000609620009e5565b8062000616575062000634565b8060405162461bcd60e51b8152600401620002ff919062000a74565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401620002ff565b6001600160e01b0319811663bc197c8160e01b14620007165760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401620002ff565b50505050505050565b6001600160a01b03163b151590565b8280546200073c9062000a89565b90600052602060002090601f016020900481019282620007605760008555620007ab565b82601f106200077b57805160ff1916838001178555620007ab565b82800160010185558215620007ab579182015b82811115620007ab5782518255916020019190600101906200078e565b50620007b9929150620007bd565b5090565b5b80821115620007b95760008155600101620007be565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620008155762000815620007ea565b5060010190565b60008219821115620008325762000832620007ea565b500190565b600081518084526020808501945080840160005b8381101562000869578151875295820195908201906001016200084b565b509495945050505050565b60408152600062000889604083018562000837565b82810360208401526200089d818562000837565b95945050505050565b6000815180845260005b81811015620008ce57602081850181015186830182015201620008b0565b81811115620008e1576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090620009249083018662000837565b828103606084015262000938818662000837565b905082810360808401526200094e8185620008a6565b98975050505050505050565b6000602082840312156200096d57600080fd5b81516001600160e01b0319811681146200098657600080fd5b9392505050565b600060033d1115620009a75760046000803e5060005160e01c5b90565b601f8201601f191681016001600160401b0381118282101715620009de57634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d1015620009f45790565b6040516003193d81016004833e81513d6001600160401b03808311602484018310171562000a2457505050505090565b828501915081518181111562000a3d5750505050505090565b843d870101602082850101111562000a585750505050505090565b62000a6960208286010187620009aa565b509095945050505050565b602081526000620009866020830184620008a6565b600181811c9082168062000a9e57607f821691505b60208210810362000abf57634e487b7160e01b600052602260045260246000fd5b50919050565b612e508062000ad56000396000f3fe60806040526004361061022f5760003560e01c80638da5cb5b1161012e578063d901b2bc116100ab578063edec5f271161006f578063edec5f271461068c578063f0292a03146106ac578063f242432a146106c2578063f2fde38b146106e2578063fe8c72eb1461070257600080fd5b8063d901b2bc146105b4578063da8596ba146105d4578063db50c05714610601578063e8a3d4851461062e578063e985e9c51461064357600080fd5b8063b99eacd1116100f2578063b99eacd114610536578063bd85b0391461054c578063c0e24d5e1461056c578063c3b754dc14610581578063d351cfdc146105a157600080fd5b80638da5cb5b1461048c578063938e3d7b146104b457806395d89b41146104d45780639fe88fa5146104e9578063a22cb4651461051657600080fd5b80632eb2c2d6116101bc5780634f02c420116101805780634f02c420146103f8578063573f5dae146104265780635c975abb14610445578063715018a6146104645780637cab00921461047957600080fd5b80632eb2c2d6146103695780633867c76e14610389578063388b9fe0146103a35780633ccfd60b146103c35780634e1273f4146103cb57600080fd5b806306fdde031161020357806306fdde03146102dd5780630c468087146102ff5780630e89341c1461031457806316c38b3c146103345780631b2ef1ca1461035657600080fd5b8062fdd58e146102345780630109c52e1461026757806301ffc9a71461027d57806306c933d8146102ad575b600080fd5b34801561024057600080fd5b5061025461024f366004612297565b610722565b6040519081526020015b60405180910390f35b34801561027357600080fd5b5061025460095481565b34801561028957600080fd5b5061029d6102983660046122d7565b6107b9565b604051901515815260200161025e565b3480156102b957600080fd5b5061029d6102c83660046122fb565b600d6020526000908152604090205460ff1681565b3480156102e957600080fd5b506102f261080b565b60405161025e9190612363565b34801561030b57600080fd5b50610254600281565b34801561032057600080fd5b506102f261032f366004612376565b610899565b34801561034057600080fd5b5061035461034f36600461239f565b61092d565b005b6103546103643660046123ba565b610970565b34801561037557600080fd5b50610354610384366004612528565b610a7f565b34801561039557600080fd5b50610254655af3107a400081565b3480156103af57600080fd5b506103546103be3660046125d2565b610b16565b610354610bd9565b3480156103d757600080fd5b506103eb6103e6366004612605565b610cb0565b60405161025e919061270b565b34801561040457600080fd5b50600a546104139061ffff1681565b60405161ffff909116815260200161025e565b34801561043257600080fd5b50600f5461029d90610100900460ff1681565b34801561045157600080fd5b50600354600160a01b900460ff1661029d565b34801561047057600080fd5b50610354610dda565b6103546104873660046123ba565b610e10565b34801561049857600080fd5b506003546040516001600160a01b03909116815260200161025e565b3480156104c057600080fd5b506103546104cf36600461271e565b61116c565b3480156104e057600080fd5b506102f26111a2565b3480156104f557600080fd5b50610254610504366004612376565b600c6020526000908152604090205481565b34801561052257600080fd5b50610354610531366004612790565b6111af565b34801561054257600080fd5b5061025460075481565b34801561055857600080fd5b50610254610567366004612376565b6111be565b34801561057857600080fd5b506102f26111f3565b34801561058d57600080fd5b5061035461059c36600461239f565b611200565b6103546105af36600461280f565b611253565b3480156105c057600080fd5b506103546105cf36600461280f565b61143d565b3480156105e057600080fd5b506102546105ef366004612376565b600b6020526000908152604090205481565b34801561060d57600080fd5b5061025461061c3660046122fb565b600e6020526000908152604090205481565b34801561063a57600080fd5b506102f26115f2565b34801561064f57600080fd5b5061029d61065e36600461287b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561069857600080fd5b506103546106a73660046128a5565b611684565b3480156106b857600080fd5b5061025460085481565b3480156106ce57600080fd5b506103546106dd3660046128e7565b611720565b3480156106ee57600080fd5b506103546106fd3660046122fb565b6117a7565b34801561070e57600080fd5b5061035461071d366004612376565b61183f565b60006001600160a01b0383166107935760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806107ea57506001600160e01b031982166303a24d0760e21b145b8061080557506301ffc9a760e01b6001600160e01b03198316145b92915050565b600480546108189061294c565b80601f01602080910402602001604051908101604052809291908181526020018280546108449061294c565b80156108915780601f1061086657610100808354040283529160200191610891565b820191906000526020600020905b81548152906001019060200180831161087457829003601f168201915b505050505081565b6060600280546108a89061294c565b80601f01602080910402602001604051908101604052809291908181526020018280546108d49061294c565b80156109215780601f106108f657610100808354040283529160200191610921565b820191906000526020600020905b81548152906001019060200180831161090457829003601f168201915b50505050509050919050565b6003546001600160a01b031633146109575760405162461bcd60e51b815260040161078a90612986565b80156109685761096561186e565b50565b6109656118ff565b600354600160a01b900460ff161561099a5760405162461bcd60e51b815260040161078a906129bb565b600282106109ba5760405162461bcd60e51b815260040161078a906129e5565b6000828152600b6020908152604080832054600c909252909120546109df8383612a23565b106109fc5760405162461bcd60e51b815260040161078a90612a3b565b610a0c655af3107a400083612a64565b3414610a2a5760405162461bcd60e51b815260040161078a90612a83565b333214610a495760405162461bcd60e51b815260040161078a90612aaa565b6000838152600b602090815260408083209385019384905580519182019052908152610a7a90339085908590611983565b505050565b6001600160a01b038516331480610a9b5750610a9b853361065e565b610b025760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161078a565b610b0f8585858585611a53565b5050505050565b6003546001600160a01b03163314610b405760405162461bcd60e51b815260040161078a90612986565b60028210610b605760405162461bcd60e51b815260040161078a906129e5565b6000828152600b6020908152604080832054600c90925290912054610b858383612a23565b10610ba25760405162461bcd60e51b815260040161078a90612a3b565b6000838152600b602090815260408083209385019384905580519182019052908152610bd390859085908590611983565b50505050565b6003546001600160a01b03163314610c035760405162461bcd60e51b815260040161078a90612986565b6000610c176003546001600160a01b031690565b6001600160a01b03164760405160006040518083038185875af1925050503d8060008114610c61576040519150601f19603f3d011682016040523d82523d6000602084013e610c66565b606091505b50509050806109655760405162461bcd60e51b81526020600482015260166024820152750ccc2d2d8cac840e8de40eed2e8d0c8e4c2ee408aa8960531b604482015260640161078a565b60608151835114610d155760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161078a565b6000835167ffffffffffffffff811115610d3157610d316123dc565b604051908082528060200260200182016040528015610d5a578160200160208202803683370190505b50905060005b8451811015610dd257610da5858281518110610d7e57610d7e612ad6565b6020026020010151858381518110610d9857610d98612ad6565b6020026020010151610722565b828281518110610db757610db7612ad6565b6020908102919091010152610dcb81612aec565b9050610d60565b509392505050565b6003546001600160a01b03163314610e045760405162461bcd60e51b815260040161078a90612986565b610e0e6000611be7565b565b600f5460ff1615610e535760405162461bcd60e51b815260206004820152600d60248201526c4e6f207265656e7472616e637960981b604482015260640161078a565b600f805460ff191660011790819055610100900460ff168015610e77575042600754115b610eb95760405162461bcd60e51b81526020600482015260136024820152720eed0d2e8cad8d2e6e840d2e640ccd2dcd2e6d606b1b604482015260640161078a565b336000908152600d602052604090205460ff161515600114610f1d5760405162461bcd60e51b815260206004820152601760248201527f596f752772206e6f742077686974656c69737465642021000000000000000000604482015260640161078a565b600954336000908152600e6020526040902054610f3b908390612a23565b1115610f975760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79203230204e6674732062792077686974656c69737465642061646472604482015264032b9b997160dd1b606482015260840161078a565b60028210610fb75760405162461bcd60e51b815260040161078a906129e5565b600a54602890610fcc90839061ffff16612a23565b111561100e5760405162461bcd60e51b8152602060048201526011602482015270105b1b081d1bdad95b9cc81b5a5b9d1959607a1b604482015260640161078a565b60008111801561102057506008548111155b6110625760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081b5a5b9d08185b5bdd5b9d606a1b604482015260640161078a565b6000828152600b6020526040902054611081655af3107a400083612a64565b341461109f5760405162461bcd60e51b815260040161078a90612a83565b3332146110be5760405162461bcd60e51b815260040161078a90612aaa565b6000838152600b60205260408120918301918290555b8281101561114157600a805461ffff169060006110f083612b05565b825461ffff9182166101009390930a928302919092021990911617905550336000908152600e6020526040812080549161112983612aec565b9190505550808061113990612aec565b9150506110d4565b5061115d33848460405180602001604052806000815250611983565b5050600f805460ff1916905550565b6003546001600160a01b031633146111965760405162461bcd60e51b815260040161078a90612986565b610a7a600683836121e2565b600580546108189061294c565b6111ba338383611c39565b5050565b6000600282106111e05760405162461bcd60e51b815260040161078a906129e5565b506000908152600b602052604090205490565b600680546108189061294c565b6003546001600160a01b0316331461122a5760405162461bcd60e51b815260040161078a90612986565b61123642610384612a23565b600755600f80549115156101000261ff0019909216919091179055565b600354600160a01b900460ff161561127d5760405162461bcd60e51b815260040161078a906129bb565b600083815b818110156112c05784848281811061129c5761129c612ad6565b90506020020135836112ae9190612a23565b92506112b981612aec565b9050611282565b506112d1655af3107a400083612a64565b34146112ef5760405162461bcd60e51b815260040161078a90612a83565b60005b818110156113b857600087878381811061130e5761130e612ad6565b905060200201359050600086868481811061132b5761132b612ad6565b6000858152600b6020908152604080832054600c835292205492029390930135935090506113598383612a23565b106113765760405162461bcd60e51b815260040161078a90612a3b565b3332146113955760405162461bcd60e51b815260040161078a90612aaa565b6000928352600b6020526040909220910190556113b181612aec565b90506112f2565b506114353387878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a925089918291850190849080828437600092018290525060408051602081019091529081529250611d19915050565b505050505050565b6003546001600160a01b031633146114675760405162461bcd60e51b815260040161078a90612986565b8260005b81811015611575576000600b600088888581811061148b5761148b612ad6565b90506020020135815260200190815260200160002054905060008787848181106114b7576114b7612ad6565b90506020020135905060008686858181106114d4576114d4612ad6565b905060200201359050600282106114fd5760405162461bcd60e51b815260040161078a906129e5565b6000828152600c60205260409020546115168285612a23565b106115335760405162461bcd60e51b815260040161078a90612a3b565b3332146115525760405162461bcd60e51b815260040161078a90612aaa565b6000918252600b60205260409091209101905561156e81612aec565b905061146b565b50610b0f3386868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a02828101820190935289825290935089925088918291850190849080828437600092018290525060408051602081019091529081529250611d19915050565b6060600680546116019061294c565b80601f016020809104026020016040519081016040528092919081815260200182805461162d9061294c565b801561167a5780601f1061164f5761010080835404028352916020019161167a565b820191906000526020600020905b81548152906001019060200180831161165d57829003601f168201915b5050505050905090565b6003546001600160a01b031633146116ae5760405162461bcd60e51b815260040161078a90612986565b60005b81811015610a7a576001600d60008585858181106116d1576116d1612ad6565b90506020020160208101906116e691906122fb565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061171881612aec565b9150506116b1565b6001600160a01b03851633148061173c575061173c853361065e565b61179a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161078a565b610b0f8585858585611e64565b6003546001600160a01b031633146117d15760405162461bcd60e51b815260040161078a90612986565b6001600160a01b0381166118365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161078a565b61096581611be7565b6003546001600160a01b031633146118695760405162461bcd60e51b815260040161078a90612986565b600955565b600354600160a01b900460ff16156118985760405162461bcd60e51b815260040161078a906129bb565b6003805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118d33390565b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03163b151590565b600354600160a01b900460ff1661194f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161078a565b6003805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336118d3565b6001600160a01b0384166119a95760405162461bcd60e51b815260040161078a90612b26565b336119c3816000876119ba88611f81565b610b0f88611f81565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906119f3908490612a23565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610b0f81600087878787611fcc565b8151835114611a745760405162461bcd60e51b815260040161078a90612b67565b6001600160a01b038416611a9a5760405162461bcd60e51b815260040161078a90612baf565b3360005b8451811015611b81576000858281518110611abb57611abb612ad6565b602002602001015190506000858381518110611ad957611ad9612ad6565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611b295760405162461bcd60e51b815260040161078a90612bf4565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611b66908490612a23565b9250508190555050505080611b7a90612aec565b9050611a9e565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611bd1929190612c3e565b60405180910390a4611435818787878787612127565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603611cac5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161078a565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611d3f5760405162461bcd60e51b815260040161078a90612b26565b8151835114611d605760405162461bcd60e51b815260040161078a90612b67565b3360005b8451811015611dfc57838181518110611d7f57611d7f612ad6565b6020026020010151600080878481518110611d9c57611d9c612ad6565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611de49190612a23565b90915550819050611df481612aec565b915050611d64565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611e4d929190612c3e565b60405180910390a4610b0f81600087878787612127565b6001600160a01b038416611e8a5760405162461bcd60e51b815260040161078a90612baf565b33611e9a8187876119ba88611f81565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611edb5760405162461bcd60e51b815260040161078a90612bf4565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611f18908490612a23565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611f78828888888888611fcc565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611fbb57611fbb612ad6565b602090810291909101015292915050565b6001600160a01b0384163b156114355760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906120109089908990889088908890600401612c6c565b6020604051808303816000875af192505050801561204b575060408051601f3d908101601f1916820190925261204891810190612cb1565b60015b6120f757612057612cce565b806308c379a003612090575061206b612cea565b806120765750612092565b8060405162461bcd60e51b815260040161078a9190612363565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161078a565b6001600160e01b0319811663f23a6e6160e01b14611f785760405162461bcd60e51b815260040161078a90612d74565b6001600160a01b0384163b156114355760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061216b9089908990889088908890600401612dbc565b6020604051808303816000875af19250505080156121a6575060408051601f3d908101601f191682019092526121a391810190612cb1565b60015b6121b257612057612cce565b6001600160e01b0319811663bc197c8160e01b14611f785760405162461bcd60e51b815260040161078a90612d74565b8280546121ee9061294c565b90600052602060002090601f0160209004810192826122105760008555612256565b82601f106122295782800160ff19823516178555612256565b82800160010185558215612256579182015b8281111561225657823582559160200191906001019061223b565b50612262929150612266565b5090565b5b808211156122625760008155600101612267565b80356001600160a01b038116811461229257600080fd5b919050565b600080604083850312156122aa57600080fd5b6122b38361227b565b946020939093013593505050565b6001600160e01b03198116811461096557600080fd5b6000602082840312156122e957600080fd5b81356122f4816122c1565b9392505050565b60006020828403121561230d57600080fd5b6122f48261227b565b6000815180845260005b8181101561233c57602081850181015186830182015201612320565b8181111561234e576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006122f46020830184612316565b60006020828403121561238857600080fd5b5035919050565b8035801515811461229257600080fd5b6000602082840312156123b157600080fd5b6122f48261238f565b600080604083850312156123cd57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612418576124186123dc565b6040525050565b600067ffffffffffffffff821115612439576124396123dc565b5060051b60200190565b600082601f83011261245457600080fd5b813560206124618261241f565b60405161246e82826123f2565b83815260059390931b850182019282810191508684111561248e57600080fd5b8286015b848110156124a95780358352918301918301612492565b509695505050505050565b600082601f8301126124c557600080fd5b813567ffffffffffffffff8111156124df576124df6123dc565b6040516124f6601f8301601f1916602001826123f2565b81815284602083860101111561250b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561254057600080fd5b6125498661227b565b94506125576020870161227b565b9350604086013567ffffffffffffffff8082111561257457600080fd5b61258089838a01612443565b9450606088013591508082111561259657600080fd5b6125a289838a01612443565b935060808801359150808211156125b857600080fd5b506125c5888289016124b4565b9150509295509295909350565b6000806000606084860312156125e757600080fd5b6125f08461227b565b95602085013595506040909401359392505050565b6000806040838503121561261857600080fd5b823567ffffffffffffffff8082111561263057600080fd5b818501915085601f83011261264457600080fd5b813560206126518261241f565b60405161265e82826123f2565b83815260059390931b850182019282810191508984111561267e57600080fd5b948201945b838610156126a3576126948661227b565b82529482019490820190612683565b965050860135925050808211156126b957600080fd5b506126c685828601612443565b9150509250929050565b600081518084526020808501945080840160005b83811015612700578151875295820195908201906001016126e4565b509495945050505050565b6020815260006122f460208301846126d0565b6000806020838503121561273157600080fd5b823567ffffffffffffffff8082111561274957600080fd5b818501915085601f83011261275d57600080fd5b81358181111561276c57600080fd5b86602082850101111561277e57600080fd5b60209290920196919550909350505050565b600080604083850312156127a357600080fd5b6127ac8361227b565b91506127ba6020840161238f565b90509250929050565b60008083601f8401126127d557600080fd5b50813567ffffffffffffffff8111156127ed57600080fd5b6020830191508360208260051b850101111561280857600080fd5b9250929050565b6000806000806040858703121561282557600080fd5b843567ffffffffffffffff8082111561283d57600080fd5b612849888389016127c3565b9096509450602087013591508082111561286257600080fd5b5061286f878288016127c3565b95989497509550505050565b6000806040838503121561288e57600080fd5b6128978361227b565b91506127ba6020840161227b565b600080602083850312156128b857600080fd5b823567ffffffffffffffff8111156128cf57600080fd5b6128db858286016127c3565b90969095509350505050565b600080600080600060a086880312156128ff57600080fd5b6129088661227b565b94506129166020870161227b565b93506040860135925060608601359150608086013567ffffffffffffffff81111561294057600080fd5b6125c5888289016124b4565b600181811c9082168061296057607f821691505b60208210810361298057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252600e908201526d34b21036bab9ba103132901e101960911b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115612a3657612a36612a0d565b500190565b6020808252600f908201526e1cdd5c1c1b1e48195e18d959591959608a1b604082015260600190565b6000816000190483118215151615612a7e57612a7e612a0d565b500290565b6020808252600d908201526c0d2dcc6dee4e4cac6e8408aa89609b1b604082015260600190565b6020808252601290820152716e6f20736d61727420636f6e74726163747360701b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060018201612afe57612afe612a0d565b5060010190565b600061ffff808316818103612b1c57612b1c612a0d565b6001019392505050565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000612c5160408301856126d0565b8281036020840152612c6381856126d0565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ca690830184612316565b979650505050505050565b600060208284031215612cc357600080fd5b81516122f4816122c1565b600060033d1115612ce75760046000803e5060005160e01c5b90565b600060443d1015612cf85790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612d2857505050505090565b8285019150815181811115612d405750505050505090565b843d8701016020828501011115612d5a5750505050505090565b612d69602082860101876123f2565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090612de8908301866126d0565b8281036060840152612dfa81866126d0565b90508281036080840152612e0e8185612316565b9897505050505050505056fea26469706673582212203f7a9cc5704f78894b3cd75efc1b7e07a3e49aacdef4b6c84106fa0d34d2558064736f6c634300080e003368747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d6361357646394c7a5853546f665357793261437161543454656574386957324770594a544d6972786d5050612f7b69647d2e6a736f6e68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d5269344d387744787677694d5737525663623731787961546465665a754b3356446a7554694155775946614e",
  "deployedBytecode": "0x60806040526004361061022f5760003560e01c80638da5cb5b1161012e578063d901b2bc116100ab578063edec5f271161006f578063edec5f271461068c578063f0292a03146106ac578063f242432a146106c2578063f2fde38b146106e2578063fe8c72eb1461070257600080fd5b8063d901b2bc146105b4578063da8596ba146105d4578063db50c05714610601578063e8a3d4851461062e578063e985e9c51461064357600080fd5b8063b99eacd1116100f2578063b99eacd114610536578063bd85b0391461054c578063c0e24d5e1461056c578063c3b754dc14610581578063d351cfdc146105a157600080fd5b80638da5cb5b1461048c578063938e3d7b146104b457806395d89b41146104d45780639fe88fa5146104e9578063a22cb4651461051657600080fd5b80632eb2c2d6116101bc5780634f02c420116101805780634f02c420146103f8578063573f5dae146104265780635c975abb14610445578063715018a6146104645780637cab00921461047957600080fd5b80632eb2c2d6146103695780633867c76e14610389578063388b9fe0146103a35780633ccfd60b146103c35780634e1273f4146103cb57600080fd5b806306fdde031161020357806306fdde03146102dd5780630c468087146102ff5780630e89341c1461031457806316c38b3c146103345780631b2ef1ca1461035657600080fd5b8062fdd58e146102345780630109c52e1461026757806301ffc9a71461027d57806306c933d8146102ad575b600080fd5b34801561024057600080fd5b5061025461024f366004612297565b610722565b6040519081526020015b60405180910390f35b34801561027357600080fd5b5061025460095481565b34801561028957600080fd5b5061029d6102983660046122d7565b6107b9565b604051901515815260200161025e565b3480156102b957600080fd5b5061029d6102c83660046122fb565b600d6020526000908152604090205460ff1681565b3480156102e957600080fd5b506102f261080b565b60405161025e9190612363565b34801561030b57600080fd5b50610254600281565b34801561032057600080fd5b506102f261032f366004612376565b610899565b34801561034057600080fd5b5061035461034f36600461239f565b61092d565b005b6103546103643660046123ba565b610970565b34801561037557600080fd5b50610354610384366004612528565b610a7f565b34801561039557600080fd5b50610254655af3107a400081565b3480156103af57600080fd5b506103546103be3660046125d2565b610b16565b610354610bd9565b3480156103d757600080fd5b506103eb6103e6366004612605565b610cb0565b60405161025e919061270b565b34801561040457600080fd5b50600a546104139061ffff1681565b60405161ffff909116815260200161025e565b34801561043257600080fd5b50600f5461029d90610100900460ff1681565b34801561045157600080fd5b50600354600160a01b900460ff1661029d565b34801561047057600080fd5b50610354610dda565b6103546104873660046123ba565b610e10565b34801561049857600080fd5b506003546040516001600160a01b03909116815260200161025e565b3480156104c057600080fd5b506103546104cf36600461271e565b61116c565b3480156104e057600080fd5b506102f26111a2565b3480156104f557600080fd5b50610254610504366004612376565b600c6020526000908152604090205481565b34801561052257600080fd5b50610354610531366004612790565b6111af565b34801561054257600080fd5b5061025460075481565b34801561055857600080fd5b50610254610567366004612376565b6111be565b34801561057857600080fd5b506102f26111f3565b34801561058d57600080fd5b5061035461059c36600461239f565b611200565b6103546105af36600461280f565b611253565b3480156105c057600080fd5b506103546105cf36600461280f565b61143d565b3480156105e057600080fd5b506102546105ef366004612376565b600b6020526000908152604090205481565b34801561060d57600080fd5b5061025461061c3660046122fb565b600e6020526000908152604090205481565b34801561063a57600080fd5b506102f26115f2565b34801561064f57600080fd5b5061029d61065e36600461287b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561069857600080fd5b506103546106a73660046128a5565b611684565b3480156106b857600080fd5b5061025460085481565b3480156106ce57600080fd5b506103546106dd3660046128e7565b611720565b3480156106ee57600080fd5b506103546106fd3660046122fb565b6117a7565b34801561070e57600080fd5b5061035461071d366004612376565b61183f565b60006001600160a01b0383166107935760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806107ea57506001600160e01b031982166303a24d0760e21b145b8061080557506301ffc9a760e01b6001600160e01b03198316145b92915050565b600480546108189061294c565b80601f01602080910402602001604051908101604052809291908181526020018280546108449061294c565b80156108915780601f1061086657610100808354040283529160200191610891565b820191906000526020600020905b81548152906001019060200180831161087457829003601f168201915b505050505081565b6060600280546108a89061294c565b80601f01602080910402602001604051908101604052809291908181526020018280546108d49061294c565b80156109215780601f106108f657610100808354040283529160200191610921565b820191906000526020600020905b81548152906001019060200180831161090457829003601f168201915b50505050509050919050565b6003546001600160a01b031633146109575760405162461bcd60e51b815260040161078a90612986565b80156109685761096561186e565b50565b6109656118ff565b600354600160a01b900460ff161561099a5760405162461bcd60e51b815260040161078a906129bb565b600282106109ba5760405162461bcd60e51b815260040161078a906129e5565b6000828152600b6020908152604080832054600c909252909120546109df8383612a23565b106109fc5760405162461bcd60e51b815260040161078a90612a3b565b610a0c655af3107a400083612a64565b3414610a2a5760405162461bcd60e51b815260040161078a90612a83565b333214610a495760405162461bcd60e51b815260040161078a90612aaa565b6000838152600b602090815260408083209385019384905580519182019052908152610a7a90339085908590611983565b505050565b6001600160a01b038516331480610a9b5750610a9b853361065e565b610b025760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161078a565b610b0f8585858585611a53565b5050505050565b6003546001600160a01b03163314610b405760405162461bcd60e51b815260040161078a90612986565b60028210610b605760405162461bcd60e51b815260040161078a906129e5565b6000828152600b6020908152604080832054600c90925290912054610b858383612a23565b10610ba25760405162461bcd60e51b815260040161078a90612a3b565b6000838152600b602090815260408083209385019384905580519182019052908152610bd390859085908590611983565b50505050565b6003546001600160a01b03163314610c035760405162461bcd60e51b815260040161078a90612986565b6000610c176003546001600160a01b031690565b6001600160a01b03164760405160006040518083038185875af1925050503d8060008114610c61576040519150601f19603f3d011682016040523d82523d6000602084013e610c66565b606091505b50509050806109655760405162461bcd60e51b81526020600482015260166024820152750ccc2d2d8cac840e8de40eed2e8d0c8e4c2ee408aa8960531b604482015260640161078a565b60608151835114610d155760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161078a565b6000835167ffffffffffffffff811115610d3157610d316123dc565b604051908082528060200260200182016040528015610d5a578160200160208202803683370190505b50905060005b8451811015610dd257610da5858281518110610d7e57610d7e612ad6565b6020026020010151858381518110610d9857610d98612ad6565b6020026020010151610722565b828281518110610db757610db7612ad6565b6020908102919091010152610dcb81612aec565b9050610d60565b509392505050565b6003546001600160a01b03163314610e045760405162461bcd60e51b815260040161078a90612986565b610e0e6000611be7565b565b600f5460ff1615610e535760405162461bcd60e51b815260206004820152600d60248201526c4e6f207265656e7472616e637960981b604482015260640161078a565b600f805460ff191660011790819055610100900460ff168015610e77575042600754115b610eb95760405162461bcd60e51b81526020600482015260136024820152720eed0d2e8cad8d2e6e840d2e640ccd2dcd2e6d606b1b604482015260640161078a565b336000908152600d602052604090205460ff161515600114610f1d5760405162461bcd60e51b815260206004820152601760248201527f596f752772206e6f742077686974656c69737465642021000000000000000000604482015260640161078a565b600954336000908152600e6020526040902054610f3b908390612a23565b1115610f975760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79203230204e6674732062792077686974656c69737465642061646472604482015264032b9b997160dd1b606482015260840161078a565b60028210610fb75760405162461bcd60e51b815260040161078a906129e5565b600a54602890610fcc90839061ffff16612a23565b111561100e5760405162461bcd60e51b8152602060048201526011602482015270105b1b081d1bdad95b9cc81b5a5b9d1959607a1b604482015260640161078a565b60008111801561102057506008548111155b6110625760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081b5a5b9d08185b5bdd5b9d606a1b604482015260640161078a565b6000828152600b6020526040902054611081655af3107a400083612a64565b341461109f5760405162461bcd60e51b815260040161078a90612a83565b3332146110be5760405162461bcd60e51b815260040161078a90612aaa565b6000838152600b60205260408120918301918290555b8281101561114157600a805461ffff169060006110f083612b05565b825461ffff9182166101009390930a928302919092021990911617905550336000908152600e6020526040812080549161112983612aec565b9190505550808061113990612aec565b9150506110d4565b5061115d33848460405180602001604052806000815250611983565b5050600f805460ff1916905550565b6003546001600160a01b031633146111965760405162461bcd60e51b815260040161078a90612986565b610a7a600683836121e2565b600580546108189061294c565b6111ba338383611c39565b5050565b6000600282106111e05760405162461bcd60e51b815260040161078a906129e5565b506000908152600b602052604090205490565b600680546108189061294c565b6003546001600160a01b0316331461122a5760405162461bcd60e51b815260040161078a90612986565b61123642610384612a23565b600755600f80549115156101000261ff0019909216919091179055565b600354600160a01b900460ff161561127d5760405162461bcd60e51b815260040161078a906129bb565b600083815b818110156112c05784848281811061129c5761129c612ad6565b90506020020135836112ae9190612a23565b92506112b981612aec565b9050611282565b506112d1655af3107a400083612a64565b34146112ef5760405162461bcd60e51b815260040161078a90612a83565b60005b818110156113b857600087878381811061130e5761130e612ad6565b905060200201359050600086868481811061132b5761132b612ad6565b6000858152600b6020908152604080832054600c835292205492029390930135935090506113598383612a23565b106113765760405162461bcd60e51b815260040161078a90612a3b565b3332146113955760405162461bcd60e51b815260040161078a90612aaa565b6000928352600b6020526040909220910190556113b181612aec565b90506112f2565b506114353387878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a925089918291850190849080828437600092018290525060408051602081019091529081529250611d19915050565b505050505050565b6003546001600160a01b031633146114675760405162461bcd60e51b815260040161078a90612986565b8260005b81811015611575576000600b600088888581811061148b5761148b612ad6565b90506020020135815260200190815260200160002054905060008787848181106114b7576114b7612ad6565b90506020020135905060008686858181106114d4576114d4612ad6565b905060200201359050600282106114fd5760405162461bcd60e51b815260040161078a906129e5565b6000828152600c60205260409020546115168285612a23565b106115335760405162461bcd60e51b815260040161078a90612a3b565b3332146115525760405162461bcd60e51b815260040161078a90612aaa565b6000918252600b60205260409091209101905561156e81612aec565b905061146b565b50610b0f3386868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a02828101820190935289825290935089925088918291850190849080828437600092018290525060408051602081019091529081529250611d19915050565b6060600680546116019061294c565b80601f016020809104026020016040519081016040528092919081815260200182805461162d9061294c565b801561167a5780601f1061164f5761010080835404028352916020019161167a565b820191906000526020600020905b81548152906001019060200180831161165d57829003601f168201915b5050505050905090565b6003546001600160a01b031633146116ae5760405162461bcd60e51b815260040161078a90612986565b60005b81811015610a7a576001600d60008585858181106116d1576116d1612ad6565b90506020020160208101906116e691906122fb565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061171881612aec565b9150506116b1565b6001600160a01b03851633148061173c575061173c853361065e565b61179a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161078a565b610b0f8585858585611e64565b6003546001600160a01b031633146117d15760405162461bcd60e51b815260040161078a90612986565b6001600160a01b0381166118365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161078a565b61096581611be7565b6003546001600160a01b031633146118695760405162461bcd60e51b815260040161078a90612986565b600955565b600354600160a01b900460ff16156118985760405162461bcd60e51b815260040161078a906129bb565b6003805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118d33390565b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03163b151590565b600354600160a01b900460ff1661194f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161078a565b6003805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336118d3565b6001600160a01b0384166119a95760405162461bcd60e51b815260040161078a90612b26565b336119c3816000876119ba88611f81565b610b0f88611f81565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906119f3908490612a23565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610b0f81600087878787611fcc565b8151835114611a745760405162461bcd60e51b815260040161078a90612b67565b6001600160a01b038416611a9a5760405162461bcd60e51b815260040161078a90612baf565b3360005b8451811015611b81576000858281518110611abb57611abb612ad6565b602002602001015190506000858381518110611ad957611ad9612ad6565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611b295760405162461bcd60e51b815260040161078a90612bf4565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611b66908490612a23565b9250508190555050505080611b7a90612aec565b9050611a9e565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611bd1929190612c3e565b60405180910390a4611435818787878787612127565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603611cac5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161078a565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611d3f5760405162461bcd60e51b815260040161078a90612b26565b8151835114611d605760405162461bcd60e51b815260040161078a90612b67565b3360005b8451811015611dfc57838181518110611d7f57611d7f612ad6565b6020026020010151600080878481518110611d9c57611d9c612ad6565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611de49190612a23565b90915550819050611df481612aec565b915050611d64565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611e4d929190612c3e565b60405180910390a4610b0f81600087878787612127565b6001600160a01b038416611e8a5760405162461bcd60e51b815260040161078a90612baf565b33611e9a8187876119ba88611f81565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611edb5760405162461bcd60e51b815260040161078a90612bf4565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611f18908490612a23565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611f78828888888888611fcc565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611fbb57611fbb612ad6565b602090810291909101015292915050565b6001600160a01b0384163b156114355760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906120109089908990889088908890600401612c6c565b6020604051808303816000875af192505050801561204b575060408051601f3d908101601f1916820190925261204891810190612cb1565b60015b6120f757612057612cce565b806308c379a003612090575061206b612cea565b806120765750612092565b8060405162461bcd60e51b815260040161078a9190612363565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161078a565b6001600160e01b0319811663f23a6e6160e01b14611f785760405162461bcd60e51b815260040161078a90612d74565b6001600160a01b0384163b156114355760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061216b9089908990889088908890600401612dbc565b6020604051808303816000875af19250505080156121a6575060408051601f3d908101601f191682019092526121a391810190612cb1565b60015b6121b257612057612cce565b6001600160e01b0319811663bc197c8160e01b14611f785760405162461bcd60e51b815260040161078a90612d74565b8280546121ee9061294c565b90600052602060002090601f0160209004810192826122105760008555612256565b82601f106122295782800160ff19823516178555612256565b82800160010185558215612256579182015b8281111561225657823582559160200191906001019061223b565b50612262929150612266565b5090565b5b808211156122625760008155600101612267565b80356001600160a01b038116811461229257600080fd5b919050565b600080604083850312156122aa57600080fd5b6122b38361227b565b946020939093013593505050565b6001600160e01b03198116811461096557600080fd5b6000602082840312156122e957600080fd5b81356122f4816122c1565b9392505050565b60006020828403121561230d57600080fd5b6122f48261227b565b6000815180845260005b8181101561233c57602081850181015186830182015201612320565b8181111561234e576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006122f46020830184612316565b60006020828403121561238857600080fd5b5035919050565b8035801515811461229257600080fd5b6000602082840312156123b157600080fd5b6122f48261238f565b600080604083850312156123cd57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612418576124186123dc565b6040525050565b600067ffffffffffffffff821115612439576124396123dc565b5060051b60200190565b600082601f83011261245457600080fd5b813560206124618261241f565b60405161246e82826123f2565b83815260059390931b850182019282810191508684111561248e57600080fd5b8286015b848110156124a95780358352918301918301612492565b509695505050505050565b600082601f8301126124c557600080fd5b813567ffffffffffffffff8111156124df576124df6123dc565b6040516124f6601f8301601f1916602001826123f2565b81815284602083860101111561250b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561254057600080fd5b6125498661227b565b94506125576020870161227b565b9350604086013567ffffffffffffffff8082111561257457600080fd5b61258089838a01612443565b9450606088013591508082111561259657600080fd5b6125a289838a01612443565b935060808801359150808211156125b857600080fd5b506125c5888289016124b4565b9150509295509295909350565b6000806000606084860312156125e757600080fd5b6125f08461227b565b95602085013595506040909401359392505050565b6000806040838503121561261857600080fd5b823567ffffffffffffffff8082111561263057600080fd5b818501915085601f83011261264457600080fd5b813560206126518261241f565b60405161265e82826123f2565b83815260059390931b850182019282810191508984111561267e57600080fd5b948201945b838610156126a3576126948661227b565b82529482019490820190612683565b965050860135925050808211156126b957600080fd5b506126c685828601612443565b9150509250929050565b600081518084526020808501945080840160005b83811015612700578151875295820195908201906001016126e4565b509495945050505050565b6020815260006122f460208301846126d0565b6000806020838503121561273157600080fd5b823567ffffffffffffffff8082111561274957600080fd5b818501915085601f83011261275d57600080fd5b81358181111561276c57600080fd5b86602082850101111561277e57600080fd5b60209290920196919550909350505050565b600080604083850312156127a357600080fd5b6127ac8361227b565b91506127ba6020840161238f565b90509250929050565b60008083601f8401126127d557600080fd5b50813567ffffffffffffffff8111156127ed57600080fd5b6020830191508360208260051b850101111561280857600080fd5b9250929050565b6000806000806040858703121561282557600080fd5b843567ffffffffffffffff8082111561283d57600080fd5b612849888389016127c3565b9096509450602087013591508082111561286257600080fd5b5061286f878288016127c3565b95989497509550505050565b6000806040838503121561288e57600080fd5b6128978361227b565b91506127ba6020840161227b565b600080602083850312156128b857600080fd5b823567ffffffffffffffff8111156128cf57600080fd5b6128db858286016127c3565b90969095509350505050565b600080600080600060a086880312156128ff57600080fd5b6129088661227b565b94506129166020870161227b565b93506040860135925060608601359150608086013567ffffffffffffffff81111561294057600080fd5b6125c5888289016124b4565b600181811c9082168061296057607f821691505b60208210810361298057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252600e908201526d34b21036bab9ba103132901e101960911b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115612a3657612a36612a0d565b500190565b6020808252600f908201526e1cdd5c1c1b1e48195e18d959591959608a1b604082015260600190565b6000816000190483118215151615612a7e57612a7e612a0d565b500290565b6020808252600d908201526c0d2dcc6dee4e4cac6e8408aa89609b1b604082015260600190565b6020808252601290820152716e6f20736d61727420636f6e74726163747360701b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060018201612afe57612afe612a0d565b5060010190565b600061ffff808316818103612b1c57612b1c612a0d565b6001019392505050565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000612c5160408301856126d0565b8281036020840152612c6381856126d0565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ca690830184612316565b979650505050505050565b600060208284031215612cc357600080fd5b81516122f4816122c1565b600060033d1115612ce75760046000803e5060005160e01c5b90565b600060443d1015612cf85790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612d2857505050505090565b8285019150815181811115612d405750505050505090565b843d8701016020828501011115612d5a5750505050505090565b612d69602082860101876123f2565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090612de8908301866126d0565b8281036060840152612dfa81866126d0565b90508281036080840152612e0e8185612316565b9897505050505050505056fea26469706673582212203f7a9cc5704f78894b3cd75efc1b7e07a3e49aacdef4b6c84106fa0d34d2558064736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "contractURI()": {
        "details": "function for OpenSea that returns uri of the contract metadata"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "function for OpenSea that returns the total quantity of a token ID currently in existence"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 222,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 228,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 230,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "_paused",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 1837,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1840,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1842,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "contractUri",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 1850,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "WL_TIMER",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1853,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "MAX_MINT",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1856,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "MAX_WL_MINT",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1858,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "minted",
        "offset": 0,
        "slot": "10",
        "type": "t_uint16"
      },
      {
        "astId": 1862,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "tokenIdToExistingSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1866,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "tokenIdToMaxSupplyPlusOne",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1870,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "whitelistedAddresses",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1874,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "whitelistedPermit",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1877,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "_reentrant",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 1880,
        "contract": "solidity/contracts/CKNFT.sol:CKNFT",
        "label": "isWhiteListActive",
        "offset": 1,
        "slot": "15",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}